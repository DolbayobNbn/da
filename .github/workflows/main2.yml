name: Linux - RustDesk

on:
  workflow_dispatch:

jobs:
  build:
    name: Start Building...
    runs-on: ubuntu-latest
    timeout-minutes: 9999
    
    steps:
      - name: Installing Essentials and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget curl unzip python3
          
          # Install RustDesk dependencies (updated for Ubuntu 24.04)
          sudo apt-get install -y \
            libxdo3 \
            libxcb-shape0 \
            libva2 \
            libva-drm2 \
            libva-x11-2 \
            libgstreamer-plugins-base1.0-0 \
            gstreamer1.0-pipewire \
            libgtk-3-0 \
            libxss1 \
            libasound2t64 \
            libxtst6 \
            xdotool
          
          # Install desktop environment (lightweight)
          sudo apt-get install -y xfce4 xfce4-goodies
          
          # Install VNC server as backup
          sudo apt-get install -y tightvncserver
          
      - name: Download and Setup RustDesk
        run: |
          # Download RustDesk for Linux
          wget https://github.com/rustdesk/rustdesk/releases/download/1.4.1/rustdesk-1.4.1-x86_64.deb
          sudo dpkg -i rustdesk-1.4.1-x86_64.deb
          
      - name: Setup Display and Desktop
        run: |
          # Start virtual display
          export DISPLAY=:1
          Xvfb :1 -screen 0 1024x768x24 &
          sleep 3
          
          # Start desktop environment
          DISPLAY=:1 xfce4-session &
          sleep 10
          
      - name: Configure RustDesk
        run: |
          # Set display for all RustDesk commands
          export DISPLAY=:1
          
          # Create rustdesk config directory
          mkdir -p ~/.config/rustdesk
          
          # Start RustDesk service first
          sudo rustdesk --service &
          sleep 5
          
          # Start RustDesk GUI to initialize properly
          DISPLAY=:1 rustdesk &
          sleep 10
          
          # Try to ensure RustDesk connects to servers
          rustdesk --connect-server || echo "Server connection attempt made"
          sleep 5
          
      - name: Display Connection Info
        run: |
          echo "=== RustDesk Connection Information ==="
          echo "Runner IP: $(curl -s ifconfig.me)"
          
          # Wait longer for RustDesk to fully initialize and connect to servers
          echo "Waiting for RustDesk to connect to servers..."
          sleep 15
          
          # Try multiple attempts to get ID
          for i in {1..5}; do
            echo "Attempt $i to get RustDesk ID..."
            RUSTDESK_ID=$(rustdesk --get-id 2>/dev/null || echo "")
            if [ ! -z "$RUSTDESK_ID" ] && [ "$RUSTDESK_ID" != "ID not available yet" ]; then
              echo "RustDesk ID: $RUSTDESK_ID"
              break
            fi
            sleep 10
          done
          
          # Check if we got a valid ID
          if [ -z "$RUSTDESK_ID" ] || [ "$RUSTDESK_ID" == "ID not available yet" ]; then
            echo "RustDesk ID: Not yet registered with servers"
            echo "This may take a few more minutes to activate online..."
          fi
          
          # Set password
          TEMP_PASSWORD="TempPass123"
          rustdesk --password "$TEMP_PASSWORD" 2>/dev/null
          echo "RustDesk Password: $TEMP_PASSWORD"
          
          # Show process status
          echo "--- RustDesk Processes ---"
          ps aux | grep rustdesk || echo "No RustDesk processes found"
          
          # Show network connections
          echo "--- Network Status ---"
          netstat -tlnp 2>/dev/null | grep rustdesk || echo "No RustDesk network connections"
          
          echo "========================================="
          
      - name: Keep Alive
        run: |
          # Create a Python script to keep the session alive
          cat > keep_alive.py << 'EOF'
          import time
          import subprocess
          
          print("Keeping session alive...")
          print("Connect via RustDesk using the ID shown above")
          
          counter = 0
          while True:
              counter += 1
              print(f"Alive for {counter} minutes")
              time.sleep(60)
          EOF
          
          python3 keep_alive.py
